#!/usr/bin/env node
"use strict";var e=require("chalk"),n=require("child_process"),o=require("fs/promises"),r=require("path"),t=require("express"),i=require("http"),c=require("socket.io"),s=require("chokidar"),a=require("@babel/traverse"),u=require("@babel/core"),d=require("fs"),l=require("commander");function p(e,n,o,r){return new(o||(o=Promise))((function(t,i){function c(e){try{a(r.next(e))}catch(e){i(e)}}function s(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(e){e(n)}))).then(c,s)}a((r=r.apply(e,n||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;var f="";function m(){return p(this,void 0,void 0,(function*(){var e=JSON.parse((yield o.readFile(r.join(f,"pls.json"))).toString());return e.type||(e.type="script"),e}))}function h(e){f=e}function g(){return f}function v(n){o.writeFile(r.join(g(),"game.d.ts"),n,"utf-8"),console.log(e.gray("[*] Update game.d.ts from server"))}function y(e,n){return p(this,void 0,void 0,(function*(){var t=0;function i(e){const n=e.split(".");return"js"!=n[n.length-1]&&(e+=".js"),e}function c(e,n){const o=[],r=function(e,n){const o=d.readFileSync(i(e)).toString();return u.parseSync(o,{sourceType:"module"==n?"module":"script"})}(e,n);if(!r)throw new Error("Cannot parse ast at "+e);a(r,{ImportDeclaration({node:e}){o.push(e.source.value)}});const c=t++,s=u.transformFromAstSync(r,d.readFileSync(i(e)).toString(),{presets:["env"]});if(!s)throw new Error("Cannot parse ast at "+e);const{code:l}=s;if(!l)throw new Error("Cannot get code from "+e);return{code:l,id:c,filename:e,dependencies:o,mapping:{}}}var s=function(e){let n="";return e.forEach((e=>{n+=`${e.id}: [function (require, module, exports) { ${e.code} },${JSON.stringify(e.mapping)},],`})),`(function(modules) {function require(id) {const [fn, mapping] = modules[id];function localRequire(name) {return require(mapping[name]);}const module = { exports : {} };fn(localRequire, module, module.exports); return module.exports;}require(0);})({${n}})`}(function(e,n){const o=[c(e,n)];for(const e of o){e.mapping={};const t=r.dirname(e.filename);e.dependencies.forEach((i=>{const s=c(r.join(t,i),n);e.mapping[i]=s.id,o.push(s)}))}return o}(r.join(n,e.entry),e.type));return yield o.writeFile(r.join(n,e.dist),s,"utf-8"),s}))}function w(n,o,r){return p(this,void 0,void 0,(function*(){const t=yield y(n,o);console.log(e.gray("[+] Code bundled")),r.emit("change",t)}))}function S(o){return p(this,void 0,void 0,(function*(){const t=yield m(),i=g();s.watch(r.join(i,t.watch)).on("change",((r,c)=>{!function(o,r,t){console.log(e.gray("[*] Watch file changed")),o.beforeBundle?n.exec(`cd ${g()} && ${o.beforeBundle}`,((e,n,i)=>p(this,void 0,void 0,(function*(){if(e)throw e;n&&console.log(n),i&&console.error(i),w(o,r,t)})))):w(o,r,t)}(t,i,o)}))}))}function b(n,o){return new Promise((r=>{const s=t(),a=i.createServer(s),u=new c.Server(a,{cors:{origin:"https://view.dao3.fun"}});var d=!1;s.get("/",((e,n)=>{n.json({pls:!0,version:"1.0.0"})})),function n(){u.once("connection",(r=>{const t=r.handshake.auth;if(t.mapId!=o)return r.disconnect(),console.warn(e.yellow(`[!] Map(${t.mapId}) tried to connect but reject.`)),void n();console.log(e.gray(`[i] Connected with map(${o}).`)),function(e){e.on("fetchDeclaretion",v)}(r),d||(d=!0,S(u)),r.on("disconnect",(()=>{console.log(e.gray("[i] Disconnected")),n()}))}))}(),a.listen(n,(()=>{console.log(e.gray(`[i] Local server run on port ${n}.`)),r()}))}))}l.program.name("Pro Local Scripting").version("1.0.0").argument("<scripting-dictionary>").action((o=>{h(o),function(){return p(this,void 0,void 0,(function*(){const n=g();if(!n)throw new Error(e.red("\nPlease enter script path!\nSee more at https://github.com/bcmRayCrazy-coder/pro-local-scripting/blob/main/README.md#Use"));if(!d.existsSync(n))throw new Error(e.red("Invalid path "+n));if(!d.existsSync(r.join(n,"pls.json")))throw new Error(e.red("\nCannot find config file!\nSee more at https://github.com/bcmRayCrazy-coder/pro-local-scripting/blob/main/README.md#Configure"))}))}().then((function(){return p(this,void 0,void 0,(function*(){console.log(e.bold.green("Launching Pro Local Scripting"));const o=yield m();yield b(o.port,o.mapId),n.exec("code "+g(),((n,o,r)=>{n?console.error(e.red('Unable to launch Visual Studio Code!\nPlease press "F1" and enter " > Shell Command: Install \'code\' command in PATH "\nYou have to open it manually this time.')):console.log(e.gray("[i] Launched Workspace"))}))}))}))})).parse();
